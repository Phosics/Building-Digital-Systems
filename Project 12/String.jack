// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array string;
	field int length;
	field int maximumLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength = 0) {
			let maxLength = 1;
		}
		let string = Array.new(maxLength);
		let length = 0;
		let maximumLength = maxLength;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do string.dispose();
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let string[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if (length < maximumLength) {
			let string[length] = c;
			let length = length + 1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let string[length] = 0;
		let length = length - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int value, i;
		var boolean negation;
		let value = 0;
		
		if ((length > 0) & (string[0] = 45)) {		// Ascii value of '-'.
			let negation = true;
			let i = 1;
		}
		
		while (i < length) {
			if (string[i] > 47 & string[i] < 58) {		// Ascii values for 0-9 digits.
				let value = (value * 10) + string[i] - 48;
			}
			let i = i + 1;
		}
		
		if (negation) {
			return -value;
		}
		return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		while (length > 0) {
			do eraseLastChar();
		}
		do evalInt(val);
		return;
	}
	
	method void evalInt(int val) {
		var int i, digit;
		if (val < 0) {
			do appendChar(45);	// Add negation sign.
			let val = Math.abs(val);
		}
		
		let i = val / 10;
		let digit = val - (i * 10);
		if (~(i = 0)) {
			do evalInt(i);
		}
		do appendChar(digit + 48);		
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;		// Ascii value for newLine;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;		// Ascii value for backSpace.
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;		// Ascii value for doubleQuote;
    }
}
