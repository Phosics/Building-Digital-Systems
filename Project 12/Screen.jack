// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array screen;
	static boolean color;

    /** Initializes the Screen. */
    function void init() {
		let screen = 16384;
		let color = true;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int pixel;
		let pixel = 0;
		while (pixel < 8192) {
			let screen[pixel] = false;
			let pixel = pixel + 1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address, mask;
		let address = 32 * y + (x / 16);
		let mask = Math.getBit(x & 15);
		if (color) {
			let screen[address] = screen[address] | mask;
		}
		else {
			let screen[address] = screen[address] & ~mask;
		}
		return;
	}

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int dx, dy;
		var int temp;
		if( x1 > x2 ) {
			let temp = x1;
			let x1 = x2;
			let x2 = temp;
			let temp = y1;
			let y1 = y2;
			let y2 = temp;
        }
		let dx = x2 - x1;
		let dy = y2 - y1;
		
		if (dx = 0) {
			do Screen.drawVerticalLine(x1, y1, y2);
		}
		else { 
			if (dy = 0) {
				do Screen.drawHorizontalLine(x1, x2, y1);
			}
			else {
				do Screen.drawDiagonalLine(x1, y1, x2, y2);
			}
		}
		return;
	}

	function void drawHorizontalLine(int x1, int x2, int y){
		var int temp;
		if(x1 > x2){
			let temp = x1;
			let x1 = x2;
			let x2 = temp;
		}
		while(~(x2 < x1)){
			do Screen.drawPixel(x1, y);
			let x1 = x1 + 1;
		}
		return;
	}

    //draw vertical line
    function void drawVerticalLine(int x, int y1, int y2){
		var int temp;
		if(y1 > y2){
			let temp = y1;
			let y1 = y2;
			let y2 = temp;
		}
		while(~(y2 < y1)){
			do Screen.drawPixel(x, y1);
			let y1 = y1 + 1;
		}
		return;
	}
    
	function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
		var int xDirection, yDirection;
		var int moveTowards;
		var int diagonalDirection;
		let xDirection = 0;
		let yDirection = 0;
		let moveTowards = 0;
		
		if ((y2 - y1) < 0) {
			let diagonalDirection = -1;
		}
		else {
			let diagonalDirection = 1;
		}
		while ((~(xDirection > (x2 - x1)) & (diagonalDirection = 1)) | (~(yDirection < (y2 - y1)) & (diagonalDirection = -1))) {
			do Screen.drawPixel(x1 + xDirection, y1 + yDirection);
			if (moveTowards < 0) {
				let xDirection = xDirection + Math.abs(diagonalDirection);
				let moveTowards = moveTowards + ((y2 - y1) * diagonalDirection);
			}
			else {
				let yDirection = yDirection + diagonalDirection;
				let moveTowards = moveTowards - (x2 - x1);
			}
		}
		return;
	}

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		while(~(y1 > y2)) {
			do Screen.drawHorizontalLine(x1, x2, y1);
			let y1 = y1 + 1;
		}
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dy, rSquare, halfChord;
		let dy = -r;
		let rSquare = r*r;
		
		while(~(dy > r)) {
			let halfChord = Math.sqrt(rSquare - (dy * dy));
			do Screen.drawLine(x - halfChord, y + dy, x + halfChord, y + dy);
			let dy = dy + 1;
		}
		return;
	}
}
