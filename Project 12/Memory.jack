// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram;
	static Array heap;
	static Array freeList;
	

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048;
		let freeList = heap;
		let heap[0] = 0;
		let heap[1] = 14334;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
	function int alloc(int size) {
		var int address, block;
		var boolean isNotAvailable;
		let address = 0; 
		let freeList = heap[address+1];
		while(isNotAvailable){
			if((freeList < (size + 2))){
				let address = heap[address];
				let freeList = heap[address + 1];
				let isNotAvailable = false;
			}
		}

		let block = (address + freeList + 2) - (size + 2);
        let heap[block] = 0;
        let heap[block + 1] = size;
        let heap[address + 1] = freeList - (size + 2);

       return block;
        
    }


    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var int address;
		var boolean freeListAvailable;
		let address = 0; 
		while(freeListAvailable){
			if (heap[address] = 0){
				let heap[address] = o;
				let freeListAvailable = false;
			}
			let address = heap[address];
		}
		return;
	}    
}
