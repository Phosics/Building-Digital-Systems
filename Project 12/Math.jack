// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static Array bits;

    /** Initializes the library. */
    function void init() {
		var int bit, i;
		let bits = Array.new(16);	// Creating 16-bit numbers.
		let bit = 1;
        let i = 0;
        while (i < 16) {
            let bits[i] = bit;
            let bit = bit + bit;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) {
			return -x;
			}
		return x;
    }

	
    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum, shiftedX, i;
		let sum = 0;
		let shiftedX = x;
		let i = 0;

		while (i < 16) {
			if (~(bits[i] & y = 0)) {
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let i = i + 1;
		}
		return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int q, quotient;
        var boolean sign;	// true for ++ or --, false for +- or -+.
		let sign = ((x < 0) = (y < 0));
		let x = Math.abs(x);
        let y = Math.abs(y);
        

        if (y > x){
            return 0;
        }
        let q = Math.divide(x, y + y);
        if ((x - (2 * q * y)) < y) {
            let quotient = q + q;
        } 
		else {
            let quotient = q + q + 1;
        }

        if (sign){
            return quotient;
        } 
		return -quotient;
        
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int j, y, eval, square;
    	let y = 0;
    	let j = 7; 

    	while(~(j < 0)){
    		let eval = y + bits[j];		// y + 2^j
            let square = eval * eval;		// (y + 2^j)^2
    		if(~(square > x) & (square > 0)){
    			let y = eval;
    		}
    		let j = j - 1;
    	}
    	return y;
    }
    

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a > b) {
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a < b) {
			return a;
		}
		return b;
    }
	
	function int getBit(int i) {
		return bits[i];
	}
}
